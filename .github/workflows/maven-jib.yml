# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven Jib

on:
# 手动执行ci
  workflow_dispatch:
    inputs:
      tag:
        description: 'Test Tag'
        required: true
        default: 'test'
        type: choice
        options:
          - dev
          - test
          - uat
env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ secrets.SWR_URL }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,enable=true,priority=100,prefix={{branch}}-,suffix=,format=short
    - name: Build with Maven Jib
      run: |
        mvn -B compile jib:build -Dmaven.test.skip=true \
        -Djib.from.image=circleci/jdk8:0.1.1 \
        -Djib.to.image=${{ steps.meta.outputs.tags }} \
        -Djib.to.auth.username=${{ secrets.SWR_USER }} \
        -Djib.to.auth.password=${{ secrets.SWR_PASSWORD }} \
        -Djib.platform.os=linux \
        -Djib.alwaysCacheBaseImage=true \
        -Djib.platform.architecture=amd64
    - name: Fix image in deploy yaml
      # 更新build/deployment.yaml中的image
      run: |
        echo "image is ${{ steps.meta.outputs.tags }}"
        sed -i "s#{{ image }}#${{ steps.meta.outputs.tags }}#g" ./deployment.yaml
    #      - uses: steebchen/kubectl@v2.0.0
    - uses: HivenOu/cd-action@main
      name: Deploy to k8s(k3s)
      with:
        config: ${{ secrets.ALI_KUBECONFIG }}
        command: apply -f ./deployment.yaml